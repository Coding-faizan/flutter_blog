// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/features/blog/domain/article.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4685705640495052625),
    name: 'Article',
    lastPropertyId: const obx_int.IdUid(11, 196702213317824225),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 84026108823710033),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4358247631533045714),
        name: 'source',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3454795686946410299),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8202945796114721522),
        name: 'title',
        type: 9,
        flags: 2048,
        indexId: const obx_int.IdUid(3, 7273283903994723421),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8876295706742256299),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 9117687022054988401),
        name: 'url',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5043725771126732004),
        name: 'urlToImage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 680997765479841857),
        name: 'publishedAt',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3690034340144564380),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4589093780261033555),
        name: 'isFav',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 196702213317824225),
        name: 'isWatched',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 4685705640495052625),
    lastIndexId: const obx_int.IdUid(3, 7273283903994723421),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [273740008228373071, 6177356929457975049],
    retiredIndexUids: const [4052274468232260939],
    retiredPropertyUids: const [
      3593680680649626775,
      8848491596338528772,
      5765684945153155568,
      5295763711705031737,
      8054026832853137321,
      2089430366455036154,
      7415943699945723268,
      2258688279939994440,
      8820561906452653421,
      7343345981176798120,
      3226775935008999573,
      635004619506358691,
      5483076642094186828,
      6362227417809720720,
      9220521203805174285,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Article: obx_int.EntityDefinition<Article>(
      model: _entities[0],
      toOneRelations: (Article object) => [],
      toManyRelations: (Article object) => {},
      getId: (Article object) => object.id,
      setId: (Article object, int id) {
        object.id = id;
      },
      objectToFB: (Article object, fb.Builder fbb) {
        final sourceOffset = fbb.writeString(object.source);
        final authorOffset = object.author == null
            ? null
            : fbb.writeString(object.author!);
        final titleOffset = fbb.writeString(object.title);
        final descriptionOffset = fbb.writeString(object.description);
        final urlOffset = fbb.writeString(object.url);
        final urlToImageOffset = fbb.writeString(object.urlToImage);
        final publishedAtOffset = fbb.writeString(object.publishedAt);
        final contentOffset = fbb.writeString(object.content);
        fbb.startTable(12);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, sourceOffset);
        fbb.addOffset(2, authorOffset);
        fbb.addOffset(3, titleOffset);
        fbb.addOffset(4, descriptionOffset);
        fbb.addOffset(5, urlOffset);
        fbb.addOffset(6, urlToImageOffset);
        fbb.addOffset(7, publishedAtOffset);
        fbb.addOffset(8, contentOffset);
        fbb.addBool(9, object.isFav);
        fbb.addBool(10, object.isWatched);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final sourceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final urlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final urlToImageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final publishedAtParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final isFavParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          22,
          false,
        );
        final isWatchedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          24,
          false,
        );
        final object = Article(
          id: idParam,
          source: sourceParam,
          author: authorParam,
          title: titleParam,
          description: descriptionParam,
          url: urlParam,
          urlToImage: urlToImageParam,
          publishedAt: publishedAtParam,
          content: contentParam,
          isFav: isFavParam,
          isWatched: isWatchedParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Article] entity fields to define ObjectBox queries.
class Article_ {
  /// See [Article.id].
  static final id = obx.QueryIntegerProperty<Article>(
    _entities[0].properties[0],
  );

  /// See [Article.source].
  static final source = obx.QueryStringProperty<Article>(
    _entities[0].properties[1],
  );

  /// See [Article.author].
  static final author = obx.QueryStringProperty<Article>(
    _entities[0].properties[2],
  );

  /// See [Article.title].
  static final title = obx.QueryStringProperty<Article>(
    _entities[0].properties[3],
  );

  /// See [Article.description].
  static final description = obx.QueryStringProperty<Article>(
    _entities[0].properties[4],
  );

  /// See [Article.url].
  static final url = obx.QueryStringProperty<Article>(
    _entities[0].properties[5],
  );

  /// See [Article.urlToImage].
  static final urlToImage = obx.QueryStringProperty<Article>(
    _entities[0].properties[6],
  );

  /// See [Article.publishedAt].
  static final publishedAt = obx.QueryStringProperty<Article>(
    _entities[0].properties[7],
  );

  /// See [Article.content].
  static final content = obx.QueryStringProperty<Article>(
    _entities[0].properties[8],
  );

  /// See [Article.isFav].
  static final isFav = obx.QueryBooleanProperty<Article>(
    _entities[0].properties[9],
  );

  /// See [Article.isWatched].
  static final isWatched = obx.QueryBooleanProperty<Article>(
    _entities[0].properties[10],
  );
}
